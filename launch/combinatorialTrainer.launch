<!--Launches recognition system that processes incoming AsrObject messages in order to recognize scenes represented in an sqlite database. Visualizes recognition result via RViz. @author Pascal Meissner, @version See SVN.-->
<launch>

  <node name="combinatorialTrainer" pkg="asr_ism" type="combinatorialTrainer" output="screen" >

    <param name ="outputDataPath" value=""/>

    <!--Load some parameters recorder, trainer, combinatorialTrainer and recognizer have in common.-->
    <rosparam file="$(find asr_ism)/launch/helpers/sqlitedb.yaml"/>

    <!--Load some parameters trainer, combinatorialTrainer and recognizer have in common.-->
    <rosparam file="$(find asr_ism)/launch/helpers/visualization.yaml"/>

    <!--Load some parameters combinatorialTrainer and recognizer have in common.-->
    <rosparam file="$(find asr_ism)/launch/helpers/sensitivity.yaml"/>
    
    <!-- This parameter influences the neighbourhood of a topology T. If swapRelations == true, then topologies that can be created by swaping one relation that is part of that topology T with one that is not are considered neighbours of T.
    This parameter only effects TopologyGeneratorPaper. -->
    <param name="swapRelations" value="true"/>

    <!-- This parameter influences the neighbourhood of a topology T. If removeRelations == true, then topologies that can be created by removing one relation from topology T are considered neighbours of T.
    This parameter only effects TopologyGeneratorPaper. -->
    <param name="removeRelations" value="true"/>

    <!--path to the sql database that contains valid testsets. if loadvalidtestsetsfrom == "" new valid testsets are generated-->
    <param name="loadValidTestSetsFrom" value=""/> 

    <!--path to the sql database that contains invalid testsets. if loadinvalidtestsetsfrom == "" new invalid testsets are generated-->
    <param name="loadInvalidTestSetsFrom" value=""/>

    <!--path(s) to the file(s) that contain the topologies from which to optimization process is started. Paths must be separeated by a semicolon. If loadStartTopologies is not specified for a pattern, new start topologies are generated.-->
    <param name="loadStartTopologiesFrom" value=""/>

    <!--If no start topology was provided, the optimiztion will be started from a random topology if startFromRandomTopology == true, else the best star topology will be selected and the optimization will started from that topology.-->
    <param name="startFromRandomTopology" value="true"/>

    <!--path to where the valid testsets will be stored. If left empty, the testsets are not stored-->
    <param name="storeValidTestSetsTo" value=""/>

    <!--path to where the invalid testsets will be stored. If left empty, the testsets are not stored-->
    <param name="storeInvalidTestSetsTo" value=""/>

    <!--Whether to write the ism of the fully meshed topology to a sql database  or not-->
    <param name="storeFullyMeshedISM" value="false"/>

    <!--Whether to write the ism of the selected start topology to a sql database or not-->
    <param name="storeStartTopologyISM" value="false"/>
   
    <!--The amount of valid and invalid test sets that are generated-->
    <param name="testSetCount" value="600"/>
   
    <!--Threshold for how big the confidence for a recognition result must be to be accepted.-->
    <param name="confidenceThreshold" value="0.99"/>

    <!--Which evaluator is used. evaluatorId == 0 => Tester. -->
    <param name="evaluatorId" value="0"/>

    <!--Whether the test for false negatives should be run or not. False negatives have no influence on the rating of topologies -->
    <param name="testForFalseNegatives" value="false"/>

    <!--Which cost function is used. costFunctionId == 0 => WeightedSum. -->
    <param name="costFunctionId" value="0"/>

    <!--The weight for the normalised false positives-->
    <param name="alpha" value="5"/> 

    <!--The weight for the normalised average recognition runtime-->
    <param name="beta" value="1"/>

    <!--Which topologyGenerator is used:
		-topologyGenerator == 0 => TopologyGeneratorPaper.
		-topologyGenerator == 1 => TopologyGeneratorNaive.
    -->
    <param name="topologyGeneratorId" value="0"/>

    <!--Which treeValidator is used:
		-treeValidatorId == 0 => HeightChecker.
    -->
    <param name="treeValidatorId" value="0"/>

    <!--Which optimization algorithm is used:
		-optimzationAlgorithmId == 0 => HillClimbing.
		-optimzationAlgorithmId == 1 => SimulatedAnnealing.
		-optimzationAlgorithmId == 2 => RecordHunt.
    -->
    <param name="optimizationAlgorithmId" value="2"/>

    <!--Whether hillclimbing continues if a new evaluation result is exactly equal to the best evaluation result (hillClimbingStrictMonoton == false) or whether a true improvement is requiered and the optimization stops if both are equal (hillClimbingStrictMonoton == true). -->
    <param name="hillClimbingStrictMonoton" value="true"/>

    <!--The maximum tree height that is accepted by HeightChecker. -->
    <param name="maxTreeHeight" value="3"/>

    <!--The maximum number of neighbours that are visited during ONE optimization step. If maxNeighbourCount == -1, all neighbours will be visited. -->
    <param name="maxNeighbourCount" value="30"/>

    <!--The probability of performing a random restart. Value must be between 0 and 1. -->
    <param name="randomRestartProbability" value="0.0"/>

    <!--The probability of performing a walk. Value must be between 0 and 1. -->
    <param name="randomWalkProbability" value="0.0"/>

    <!--The starting temperature of simulated annealing. -->
    <param name="startTemperature" value="1"/>

    <!--The end temperature of simulated annealing, if temperature < endTemperature simulated annealing stops. -->
    <param name="endTemperature" value="0.005"/>

    <!--Used to calculate the next temperature, temperature_t+1 = temperature_t * temperatureFactor. -->
    <param name="temperatureFactor" value="0.85"/>

    <!--How many topologies are visited in simulated annealing before the temperature is updated (e.g. if (topologiesVisited % repetitionsBeforeUpdated == 0) updatTemperature) -->
    <param name="repetitionsBeforeUpdated" value="8"/>

    <!--Used to initialise currentAcceptableCostDelta in RecordHunt. If new_cost is the cost we want to check and lowest_cost is the lowest cost we have encountered so far, then new_cost is accepted if: new_cost <= (1 + currentAcceptableCostDelta) * lowest_cost -->
    <param name="initialAcceptableCostDelta" value="0.02"/>

    <!--Used to update the current costDifferenceDelta-->
    <param name="costDeltaDecreaseFactor" value="0.01"/>
    
  </node>
</launch>
